marker UI_START
decimal

2 constant LCD_ROWS    \ number of rows displayed on lcd
4 constant UI_ROWS     \ number of rows per UI screen
2 constant UI_SCREENS  \ num UI screens

0 value currScreen     \ current screen
0 value currRow        \ curr row
0 value selected       \ if row is selected

\ USER VARIABLES ACCESSIBLE TO UART TASK
0 variable trigLevL drop
0 variable delay1L drop
0 variable delay2L drop
0 variable delay3L drop
0 variable dacReadL drop
0 variable adcReadL drop
0 variable outLevsL drop

0 variable trigLevH drop
0 variable delay1H drop
0 variable delay2H drop
0 variable delay3H drop
0 variable dacReadH drop
0 variable adcReadH drop
0 variable outLevsH drop


0 value UIVar
0 value UIReg

: setInitial
100 trigLevL !
120 delay1L ! ;

: UIARR
create UI_SCREENS UI_ROWS 4 * * cells allot 
does> rot rot 4 * swap UI_ROWS * 4 * + cells + ;

UIARR uiArr

\ Add uart sends on select here?
: string00 s" Trig" ;

: string01 s" D1" ;

: string02 s" D2" ;

: string03  s" D3" ;

: string10 s" ARM" ;

: string11 s" manArm" ;

: string12 s" Restore Regs" ;

: string13 s" Version" ;

: stringMV s" mV" ;

: stringuS s" us" ;
: sringNull s" " ;

: UIInit
$0c lcdSend    \ Turn the cursor and blink off
['] string00 0 0 uiArr !
trigLevL 0 0 uiArr 1 cells + !
trigLevH 0 0 uiArr 2 cells + !
['] stringMV 0 0 uiArr 3 cells + !
['] string01 0 1 uiArr !
delay1L 0 1 uiArr 1 cells + !
delay1H 0 1 uiArr 2 cells + !
['] stringuS 0 1 uiArr 3 cells + !
['] string02 0 2 uiArr !
delay2L 0 2 uiArr 1 cells + !
delay2H 0 2 uiArr 2 cells + !
['] stringuS 0 2 uiArr 3 cells + !
['] string03 0 3 uiArr !
delay3L 0 3 uiArr 1 cells + !
delay3H 0 3 uiArr 2 cells + !
['] stringuS 0 3 uiArr 3 cells + !
['] string10 1 0 uiArr !
dacReadL 1 0 uiArr 1 cells + !
dacReadH 1 0 uiArr 2 cells + !
['] stringMV 1 0 uiArr 3 cells + !
['] string11 1 1 uiArr !
adcReadL 1 1 uiArr 1 cells + !
adcReadH 1 1 uiArr 2 cells + !
['] stringUs 1 1 uiArr 3 cells + !
['] string12 1 2 uiArr !
outLevsL 1 2 uiArr 1 cells + !
outLevsH 1 2 uiArr 2 cells + !
['] stringNull 1 2 uiArr 3 cells + !
['] string13 1 3 uiArr !
outLevsL 1 3 uiArr 1 cells + !
outLevsH 1 3 uiArr 2 cells + !
['] stringNull 1 3 uiArr 3 cells + !
0 to rxStart
setInitial
;

( nn -- UI_SCREEN NOS UI_ROW TOS)
: UIPrintLine
#32 lcdWrite
uiArr dup dup @ execute lcdPrintS
#32 lcdWrite
\ dup 1 cells + @ @
\ swap 2 cells + @ @ lcdPrintD
1 cells + @ @ lcdPrintN
3 cells + @ execute lcdPrintS
;

: UIPrintLineSel
$3e lcdWrite
UIPrintLine
;

: UIPrintLineOth
#32 lcdWrite
UIPrintLine
;

\ will need to modify for 4 line
: lcdNextLine
$c0 lcdSend ;

\ \ ||||||||||-- UART TASK --|||||||| | | //

\ TODo NEED TO ADD RESETS TO CURPOS SOMEWHERE

: UIHandleUartErr
lcdClear
dup
101 = if
    \ time out
    s" UART TIMEOUT"
    lcdPrintS
    \ disable UI until uart conn re-established
    0 to rxStart
    drop
else
    102 = if
    \ corrupt message
        s" CORRUPT MESSAGE"
        lcdPrintS
        
    else
    \ incorrect numbers
        s" Wrong Nums"
        lcdPrintS
    then
then
100 ms
;

( n n -- )
\ expects status left by UartEnd Trans NOS
\ number of buffs to extract TOS
: uartCheckErr
swap
dup
0= if
    drop
    \ message "ok"
    rxGetNums dup 0= if
        \ leaves 0 for correct Nums
    else
        \ Hands the amount of numbers to handleError
        UIHandleUartErr
    then
else
    \ fail, timeout or corrupt
    UIHandleUartErr
    \ leaves same flag as uartEndTrans
then ;

\ TODO: ADD FLAG CHECKS FOR UART FAIL / SUCCESS
\ UART should have words for number extraction from rxBuf
: uartReadRegs
SP_AT >r
4 for
    sp@ to SP_AT
    4 1 - r@ - to uartRegNum
    readReg 1
    uartCheckErr 0= if
        \ set UI variable
        currScreen uartRegNum uiArr 1 cells + @ !
    then
    \ clear any left over nums from stack
    consumeSP 
next
r> to SP_AT
;

: uartSaveReg
SP_AT >r
to uartRegNum
sp@ to SP_AT
lcdBuff @
setReg 2
uartCheckErr 0= if
    \ reg num then value on stack
    \ Store returned value in UI
    swap dup uartRegNum = if
        currScreen swap uiArr 1 cells + @ !
    else
        lcdClear
        s" WRONG REG"
        lcdPrintS
        100 ms
    then
then
consumeSP
r> to SP_AT
;

\ Set regs to default vals
: uartInitRegs
4 for
    r@ dup 0 swap uiArr 1 cells + @ @ lcdBuff !
    uartSaveReg
next
0 lcdBuff !
;


: waitForUartRec
begin
    lcdClear
    s" Waiting For" lcdPrintS
    lcdNextLine 
    s" UART" lcdPrintS
    $0d uartSend
    250 ms
    rxStart 1 =
until ;  

: UIcheckUart
rxStart 0= if
    waitForUartRec
    0 to selected
    0 to currScreen
    0 to currRow
    uartInitRegs
    uartReadRegs
then ;

\ \ -_______________END UART TASK ______//


: UIPrintOptions
 \ print rows before current
UIReg for
    currScreen currRow r@ 1 + - UIPrintLineOth
    lcdNextLine
next

\ print current row
currScreen currRow UIPrintLineSel
lcdNextLine

\ print remaining rows
LCD_ROWS 1 - UIReg - to UIVar
UIVar for 
    currScreen currRow 
    UIVar r@ - + UIPrintLineOth
    lcdNextLine
next
;

: UISelect
currScreen 0= if
    lcdClear lcdHome
    currScreen currRow uiArr dup @ execute lcdPrintS
    lcdNextLine
    lcdBuff lcdPrintBuff
    $ce lcdSend
    3 cells + @ execute lcdPrintS
else
    0 to selected
    UIPrintOptions
    currRow uartSendCmd
    dup 0= if
        drop
    else
        UIHandleUartErr
    then
then
;

: UIPrintScreen
UIcheckUart
currRow LCD_ROWS mod to UIReg
currRow UI_ROWS < if
    lcdClear lcdHome
    selected 0= if
        UIPrintOptions
    else
        UISelect
    then
lcdHome
then
;

: UINumIn 
selected 1 = if
    \ addToBuff
    lcdBuff addNumToBuff
else
    clrLcdBuff
    txBufClr
then
;

: UIbuf2Var
lcdBuff @ currScreen currRow uiArr 1 cells + @ !
\ millBuff @ currScreen currRow uiArr 2 cells + @ !
;

\ could do inital reg reads here if start in other mode
: UIModSwitch
;

: UINumSave
\ UIbuf2Var
currRow uartSaveReg
clrLcdBuff
lcdClear
currScreen currRow UIPrintLineOth
lcdNextLine
s" Saved" lcdPrintS
5 ms ;

: UILeaveSelect
UINumSave
uartReadRegs
;


: UIVarSave 
selected 1 = if 
    UINumSave
else
    lcdClear
    s" All Vars" lcdPrintS
    lcdNextLine
    s" Saved" lcdPrintS
    5 ms
then ;

: UIVarRes 
selected 1 = if
    currScreen currRow uiArr 1 cells + @ @ lcdBuff !
   \ currScreen currRow uiArr 2 cells + @ @ millBuff !
else
    lcdClear
    s" all Vars" lcdPrintS
    lcdNextLine
    s" Restored" 
    5 ms
then ;

marker UI_HERE