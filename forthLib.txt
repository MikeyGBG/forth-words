( n -- n)
( Gets the decimal representation from a bitPos )
: getBNum 1 swap dup 0= if drop else lshift then ;

( uu -- u)
( bitMask takes a value and a bit position and returns the value at the bit )
( bitPos is NOS )
: bitMask swap getBNum and 0= if 0 else 1 then ;

( uu -- )
( expects TOS to be reg Addr and NOS to be the bitPos)
: setBit tuck @ swap getBNum or swap ! ;

( uu -- )
( see setBit )
: clrBit tuck @ swap getBNum invert and swap ! ;


: getIx swap 1 cells + @ swap cells + ;

( un -- )
( Initializes a pinvar to input or output expects a pinvar TOS and DDR NOS )
( add ans mods )
: pinInit dup @ swap 0 getIx @ rot 0= if clrBit else setBit then ;

( pinVAR TOS value NOS )
: setPin dup @ swap 1 getIx @ rot 0= if clrBit else setBit then ;

( n -- n )
( pinVar TOS )
: readPin dup @ swap 2 getIx @ @ bitMask ;

: workVarInit
[ 0 value workReg 0 value workBit 0 value workVar ] ;

: clrWorkVar
0 to workReg
0 to workBit
0 to workVar ;

workVarInit drop

: >digit #48 + ;
: <digit #48 - ;

2398 value SP_AT

( -- n)
\ leaves the number of cells on stack
: sp@? 
SP_AT 2399 < if
    2398 to SP_AT
then
    sp@ SP_AT - 2 / 
;

\ converts a number into a buffer 123 -> 1 2 3
: n2b
    dup workVar u/ 10 mod dup
    0= if
        workBit 1 = if
            swap
        then
    else
        swap 1 to workBit
    then
;

: cleanBuff
begin
sp@? 0 > if
    dup 0= if
        drop false
    else
        true
    then
else
0 true
then
until ;

: num2Buff
sp@ 2 - to SP_AT \ set stack pointer to 1 below TOS
1 to workVar
0 to workBit
5 for
    n2b
    workVar 10 * to workVar
next drop
cleanBuff ;

\ NOT TESTED (WONT WORK)
: num2RevBuff
sp@ 2 - to SP_AT
10000 to workVar
0 to workBit
5 for
    n2b
    workVar 10 u/ to workVar
next drop
cleanBuff ;

\ Adds a number to the buffer
\
( n1 n2 -- ) 
: addNumToBuff
dup @ 9999 < if
   dup @ 10 * rot + swap !
else
    !
then
;

\ needs SP_AT set before use
(n1 n2 n3 -- n123 )
: buff2Num
0
sp@? 1 - for
    10 * +
next
;
