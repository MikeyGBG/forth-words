( n -- n)
/Gets the decimal representation from a bitPos
: getBNum 1 swap dup 0= if drop else lshift then ;

( uu -- u)
/ bitMask takes a value and a bit position and returns the value at the bit
/ bitPos is NOS
: bitMask swap getBNum and 0= if 0 else 1 then ;

( uu -- )
/ expects TOS to be reg Addr and NOS to be the bitPos
: setBit tuck @ swap getBNum or swap ! ;

( uu -- )
/see setBit
: clrBit tuck @ swap getBNum invert and swap ! ;

( -- )
/ pinVar used to store a bitPos and everything portVar stores
: pinVar create 4 cells allot ;

: getIx swap 1 cells + @ swap cells + ;

( un -- )
/ Initializes a pinvar to input or output expects a pinvar TOS and DDR NOS
/ add ans mods
: pinInit dup @ swap 0 getIx @ rot 0= if clrBit else setBit then ;

/ pinVAR TOS value NOS
: setPin dup @ swap 1 getIx @ rot 0= if clrBit else setBit then ;

( n -- n )
/ pinVar TOS
: readPin dup @ swap 2 getIx @ @ bitMask ;




$04e0 constant ansa
$04e2 constant ansb

$02c0 constant trisa
$02c2 constant porta
$02c4 constant lata

$02c8 constant trisb
$02ca constant portb
$02cc constant latb
 

create aport trisa , lata , porta , ansa ,
create bport trisb , latb , portb , ansb ,

create a0 0 , aport ,
create a1 1 , aport ,
create a2 2 , aport ,
create a3 3 , aport ,
create a4 4 , aport ,
create a5 5 , aport ,
create a6 6 , aport ,

create b0 0 , bport ,
create b1 1 , bport ,
create b2 2 , bport ,
create b4 4 , bport ,
create b7 7 , bport ,
create b8 8 , bport ,
create b9 9 , bport ,
create b12 12 , bport ,
create b13 13 , bport ,
create b14 14 , bport ,
create b15 15 , bport ,