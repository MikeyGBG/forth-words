/ -------fizzbuzz---------------------------------
( n -- n )
: 5mod 5 mod 0= ;
( n -- n )
: 3mod 3 mod 0= ;
( n -- n )
: 53mod dup 3mod if 5mod if ." fizzbuzz" 3 else ." fizz" 2 then else drop 1 then ;
( n -- n)
: modchk dup 53mod 1 = if 5mod if ." buzz" 0 else 1 then else drop 0 then ; 
( -- )
: fbuzz 100 for 100 r@ - dup modchk 1 = if . else drop then next ;
/ ---------------------GENERAL----------------------------------------

( n -- n)
/Gets the decimal representation from a bitPos
: getBNum 1 swap dup 0= if drop else lshift then ;

( uu -- u)
/ bitMask takes a value and a bit position and returns the value at the bit
/ bitPos is NOS
: bitMask swap getBNum and 0= if 0 else 1 then ;

( uu -- )
/ expects TOS to be reg Addr and NOS to be the bitPos
: setBit tuck @ swap getBNum or swap ! ;

( uu -- )
/see setBit
: clrBit tuck @ swap getBNum invert and swap ! ;

( -- )
/ pinVar used to store a bitPos and everything portVar stores
: pinVar create 4 cells allot ;

: getIx swap 1 cells + @ swap cells + ;

( un -- )
/ Initializes a pinvar to input or output expects a pinvar TOS and DDR NOS
/ add ans mods
: pinInit dup @ swap 0 getIx @ rot 0= if clrBit else setBit then ;

/ pinVAR TOS value NOS
: setPin dup @ swap 1 getIx @ rot 0= if clrBit else setBit then ;

( n -- n )
/ pinVar TOS
: readPin dup @ swap 2 getIx @ @ bitMask ;


/ ------PIC24FV32K301----------------------

$04e0 constant ansa
$04e2 constant ansb

( Set all pins for digital use )
0 ansa !
0 ansb !

$02c0 constant trisa
$02c2 constant porta
$02c4 constant lata

$02c8 constant trisb
$02ca constant portb
$02cc constant latb

$02d0 constant trisc
$02d2 constant portc
$02d4 constant latc

create aport trisa , lata , porta , ansa ,
create bport trisb , latb , portb , ansb ,
create cport trisc , latc , portc ,

create a0 0 , aport ,
create a1 1 , aport ,
create a2 2 , aport ,
create a3 3 , aport ,
create a4 4 , aport ,
create a5 5 , aport ,
create a6 6 , aport ,

create b0 0 , bport ,
create b1 1 , bport ,
create b2 2 , bport ,
create b4 4 , bport ,
create b7 7 , bport ,
create b8 8 , bport ,
create b9 9 , bport ,
create b12 12 , bport ,
create b13 13 , bport ,
create b14 14 , bport ,
create b15 15 , bport ,

marker -PIC301   

/ --------------------------- LCD --------------------


a0 constant LCD_RS
a1 constant LCD_EN
b0 constant LCD_D0
b1 constant LCD_D1
a2 constant LCD_D2
a3 constant LCD_D3
b4 constant LCD_D4
a4 constant LCD_D5
b8 constant LCD_D6
b9 constant LCD_D7

100 constant togDel
8 constant mode

/ change this so uses lcdArr
: lcdInit
0 LCD_RS pinInit
0 LCD_EN pinInit
0 LCD_D0 pinInit
0 LCD_D1 pinInit
0 LCD_D2 pinInit
0 LCD_D3 pinInit
0 LCD_D4 pinInit
0 LCD_D5 pinInit
0 LCD_D6 pinInit
0 LCD_D7 pinInit
;

: lcdArr create 
8 mode = if
    LCD_D0 , LCD_D1 , LCD_D2 , LCD_D3 ,
then
LCD_D4 , LCD_D5 , LCD_D6 , LCD_D7 , 
;

lcdArr lcdPin

( -- )
/ toggles the LCD enable pin with a dealy of togDel ms
: lcdEN 1 LCD_EN setPin togDel ms 0 LCD_EN setPin togDel ms ;

( n -- )
/ sets the RS bit to the value on TOS
: lcdRS LCD_RS setPin ;

( c -- )
/ add mode if
: lcdLoad mode for 
    dup
    mode 1 - r@ - tuck swap bitMask swap
    lcdPin swap cells + @
    setPin
    next drop ;

( c -- )
: lcdChar 1 lcdRs lcdLoad lcdEn ;



