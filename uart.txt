marker uart-start
decimal

$0230 constant U2MODE
$0232 constant U2STA
$0234 constant U2TXREG
$0236 constant U2RXREG
$0238 constant U2BRG

$0094 constant IEC0
$0096 constant IEC1
$0086 constant IFS1
$0084 constant IFS0

b0 constant U2TX
b1 constant U2RX

0 value txDone
0 value rxExp
0 value curPos
0 value rxDis \ debug
0 variable uDebugExec drop

0 IEC1 !

\ untest and interrupts
: uBuf create 60 allot
does> + ;

\ baud rate in 100s of bauds
384 constant BAUD

: uartSetup
0 U2TX setPin
1 U2RX setPin
0 U2MODE !
0 U2STA !
[ Fcy 16 BAUD * 10 u/ u/ ] literal 1 - U2BRG !

\ enable Tx operation with UART and RX interrupts
$0400 U2STA !

#15 U2MODE setBit

U2RXREG @ drop

[ uBuf uartRxBuffer ] drop
;


\ Add transmit buf overflow check
: uartSend
begin
    1 8 lshift U2STA @ and 0= invert dup \ loop until this is 1
    if
    else
        1 ms
    then
until
U2TXREG ! ;

\ Add recieve buffer check
: uartRead 
rxExp 1 = if
    begin
        1 U2STA @ and 1 = \ loop until 1
        1 ms
    until
    U2RXREG @ curPos uartRxBuffer c!
    curPos 1 + to curPos
then ;


: U2RXInt [i
di
$4000 IFS1 mclr
rxExp 1 = if
    begin 1 U2STA @ and 1 =
        U2RXREG @ curPos uartRxBuffer c!
        curPos 1 + to curPos
    until
else
    begin 1 U2STA @ and 1 =
        U2RXREG @ drop
    until
then
ei
i] ;i


: U2RxIntReg
di
1 #14 lshift invert IEC1 @ and IEC1 ! ivt
\ clr IFS
#14 IFS1 clrBit
['] U2RXInt #38 int!
aivt
\ enable interrupts
1 #14 lshift IEC1 @ or IEC1 ! 
$40 U2STA mset
ei ;

: uartInit
uartSetup
$400 U2STA !
U2RxIntReg ;


\ \\\\\\\\\ TODO UART TASK FROM HERE DOWN ||||||||||||||||/////////
\ Should have small tx and extracted rx bufs as user vars

: uNums create 5 allot
does> + ;

uNums uartTxBuf
0 value txBufPos



: uartPrintS
for
c@+ uartSend
next
drop ;


: txBufStore
1 txBufPos + to txBufPos
txBufPos 5 < if
    txBufPos 1 - uartTxBuf c!
else
    4 to txBufPos
    drop
then
;

: txBufClr
5 for
    0 r@ uartTxBuf c!
next
0 to txBufPos
;

: uartBufOut
txBufPos for
    txBufPos 1 - r@ - uartTxBuf c@ >digit uartSend
next
;

: recvFin
curPos #11 > if
    curPos 2 - dup uartRxBuffer c@ $3e = if
         1 + uartRxBuffer c@ $20 = if
             0 to rxExp
        then
    then
then
 ;

 : isDelim
uartRxBuffer c@ dup $0d = if
    true
else
    false
then
swap
dup $0a = if
    true
else
    false
then
swap
$20 = if
    true
else
    false
then ;


: numEnd
uartRxBuffer c@ dup #48 < if
    drop true
else
    #57 > if
        true
    else
        false
    then
then
;

( n1 n2 --  )
\  n1*n2 = timeout_period
\ Add a break on RxExp = 0
: uartWaitRecv
for
    recvFin
    dup ms
next
drop ;

( -- n )
\ n is a flag left indicating the recieved message state
\ 0 'ok' received, 1 'fail, 2 timeout, 3 corrupt message
: uartProcRecv
rxExp 0= if
    \ uart completed -> check if fail or succeed
    curPos 8 - uartRxBuffer c@ $6b = if
        0    \ "ok"
    else
        1    \ "fail"
    then
else
    \ TODO: USE A LOOP TO DETERMINE WHEN COMMS READY
    \ WILL NEED TO BE A TASK TO DO THAT -> DONT ALLOW uart calls when not Ready?
    \ Could set a variable in RX INT as Reset causes uart same as key press
    \ uart didnt complete print error
    \ SHOULD HANDLE THESE IN UI FOR NOW --------
    curPos 0= if
        0 to rxExp  \ timeout
        101
    else
        \ corupt message should wait for more with short timeout
        \ maybe reset uart?
        1 5 uartWaitRecv
        102
    then
then
;

\ REMOVE DEBUG BRANCH
: uartEndTrans
0 to curPos \ reset the uart recv buf position
1 to rxExp
20 ms
#13 uartSend
txBufClr
rxDis 0= if
    \ wait for uart recieve to finish
    10 5 uartWaitRecv
    uartProcRecv

else
    uDebugExec @ex
    0 to rxExp
    uartProcRecv
then
;

( n1 n2 -- n3 )
\ n1 is a char to send n2 is a number 
\ n3 is the flag left by th
: uartFullTrans
swap
uartSend
$20 uartSend \ send a space
>digit uartSend 
uartEndTrans
;

( n -- )
: uartPrintN
num2Buff
sp@? for
    >digit uartSend
next ;



0 value loopVar
: rxExtractBufs
SP_AT >r
0 to loopVar
begin
\ loop over rxBuffer
    begin
    \ loop until a number is found
    loopVar curPos < if
        loopVar numEnd invert 0= if
            loopVar 1 + to loopVar
            false
        else
            0
            true
        then
    else
        true
    then
    until
    sp@ to SP_AT
    begin
    \ loop until the end of the number is found
    loopVar curPos < if
        loopVar uartRxBuffer c@ <digit
        sp@ 2 - addNumToBuff
        loopVar 1 + to loopVar
        loopVar numEnd
    else
        true
    then
    until
    loopVar curPos < if
        false
    else
        true
    then
until
r> to SP_AT ;

\ takes number of expected numbers returns same or error
( n -- n n ... )
: rxGetNums
SP_AT >r
sp@ to SP_AT
rxExtractBufs
sp@? SP_AT @ = if
    \ correct amount of numbers
    0
else
    \ incorrect amount of numbers
    1
then
r> to SP_AT
;

\ SHOULD PROCESS IMPORTANT MESSAGE PART INTO A BUFF -> UI









