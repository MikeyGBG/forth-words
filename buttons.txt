marker but-start

\ Changed to work with 4 rows and cols need to TEST
b15 constant row0
b14 constant row1
b13 constant row2
b12 constant row3
b11 constant col0
b10 constant col1
a7 constant col2
b9 constant col3

\ need to make waay mroe modular
\ button array for row and col
\ polarity checks for setting
\ 1 for active high
0 constant butPol 
0 value rowVal
0 value colVal

4 constant colCount
4 constant rowCount

\ NOT USED IN CODE NEED TO !!!! (4 but no WOKR)
$f constant colOff

0 value colVar
0 value rowVar

0 variable update drop

: butInit
1 row0 pinInit
1 row1 pinInit
1 row2 pinInit
1 row3 pinInit
0 col0 pinInit
0 col1 pinInit
0 col2 pinInit
0 col3 pinInit
;

: butP
butPol 0= if
    xor
else
    and
then ;

( nn -- )
\ takes col NOS row TOS
: butArr create colCount rowCount * 2 * cells allot 
does> rot rot 2 * swap rowCount * 2 * + cells + ;

butArr butAr

: rowRead 
row0 readPin to rowVal
row1 readPin 1 lshift rowVal or to rowVal
row2 readPin 2 lshift rowVal or to rowVal
row3 readPin 3 lshift rowVal or to rowVal
;

( -- )
: colWrite
colVal
dup 8 and col3 setPin
dup 4 and col2 setPin
dup 2 and col1 setPin
1 and col0 setPin
;

\ made an untested change here
: convNum
dup 8 = if 
    drop 4
else dup 4 = if
    drop 3
then
then
1 - ;


: butRead
colCount for
    1 colCount 1 - r@ - lshift $f xor to colVal
    colWrite
    1 ms
    rowRead 
    rowVal $f xor 0= invert if
        rowCount for
            1 rowCount 1 - r@ - lshift to rowVar
            rowVar rowVal and 0= if
                colVal $f xor convNum rowVar convNum butAr dup
                @ 0= if
                    1 swap !
                else
                    drop
                then      
            then
        next
    then
next ;


( nn -- )
\ expects an exec token as nos and butArr element as TOS
\ sotres the exec token in the butAr
: butExecStore
1 cells + ! ;

: butSingleExec
0 update !
colCount for
    colCount 1 - r@ - to colVar
    rowCount for
        rowCount 1 - r@ - to rowVar
        colVar rowVar butAr dup @ dup 1 = if
            drop dup
            2 swap !
            1 cells + @ execute
            1 update !
        else
            2 = if
                0 swap !
            else
                drop
            then
        then
    next
next ;


