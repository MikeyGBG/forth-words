marker LCD-start

a0 constant LCD_RS
a1 constant LCD_EN
0 constant LCD_D0 
0 constant LCD_D1 
0 constant LCD_D2 
0 constant LCD_D3 
b3 constant LCD_D4
b4 constant LCD_D5
a4 constant LCD_D6
b5 constant LCD_D7

1 constant togDel 
#2 constant intDel
4 constant mode


: lcdArr create 
LCD_D0 , LCD_D1 , LCD_D2 , LCD_D3 ,
LCD_D4 , LCD_D5 , LCD_D6 , LCD_D7 , 
;

lcdArr lcdPin
boardInit

( change this so uses lcdArr )
: lcdSetup
LCD_D0 lcdPin !
LCD_D1 lcdPin 1 cells + !
LCD_D2 lcdPin 2 cells + !
LCD_D3 lcdPin 3 cells + !
LCD_D4 lcdPin 4 cells + !
LCD_D5 lcdPin 5 cells + !
LCD_D6 lcdPin 6 cells + !
LCD_D7 lcdPin 7 cells + !

1 LCD_EN setPin
0 LCD_RS pinInit
0 LCD_EN pinInit
0 LCD_D0 pinInit
0 LCD_D1 pinInit
0 LCD_D2 pinInit
0 LCD_D3 pinInit
0 LCD_D4 pinInit
0 LCD_D5 pinInit
0 LCD_D6 pinInit
0 LCD_D7 pinInit
;

lcdSetup

marker LCD-setup

( -- )
( toggles the LCD enable pin with a dealy of togDel ms )
: lcdEn togDel ms 0 LCD_EN setPin togDel ms 1 LCD_EN setPin ;

( n -- )
( sets the RS bit to the value on TOS )
: lcdRs LCD_RS setPin ;

( c -- )
( need to make better)
: lcdLoad
mode for 
    dup
    mode 1 - r@ - tuck
    swap bitMask swap
    lcdPin swap 
    mode 4 = if
        4 +
    then
    cells + @
    setPin
next
drop ;

: lcdSet
mode 4 = if
dup $f0 and 4 rshift lcdLoad lcdEn
intDel ms
$0f and
then 
lcdLoad lcdEn ;

marker LCD-set

: lcdSend 0 lcdRs lcdSet intDel ms ;

: lcdWrite 1 lcdRs lcdSet intDel ms ;

: lcdHome 2 lcdSend ;

: lcdClear 1 lcdSend ;

: lcdLine2 $c0 lcdSend ;

: lcdStateReset 0 lcdRs
mode 4 = if $3 else $30 then
3 for 
    dup lcdLoad lcdEn
    intDel ms
next
drop ;

: lcdInit
lcdSetup
lcdStateReset
mode 4 = if
    $2 lcdLoad lcdEn
    $28 lcdSend
else
    $30 lcdSend
then
$06 lcdSend
$0f lcdSend 
lcdHome
lcdClear  ;

\ prints a string created using the s" " syntax
: lcdPrintS
for c@+ lcdWrite next
drop ;

\ prints 15 bit unsigned numbers
\ omits insignifigant zeros
: lcdPrintN
10000 to workVar
0 to workBit
5 for   
    dup workVar u/ 10 mod dup >digit swap
    0= if
        workBit 1 = if
            lcdWrite
        else
            r@ 1 = if
                lcdWrite
            else
                drop
            then
        then
    else
        lcdWrite 1 to workBit
    then
    workVar 10 u/ to workVar
next drop ;

\ prints 15 bit unsigned numbers no 0 omissions
: lcdPrintNFull
1000 to workVar
0 to workBit
4 for   
    dup workVar u/ 10 mod >digit
    lcdWrite
    workVar 10 u/ to workVar
next drop ;

: lcdPrintD
dup 0= if
    drop lcdPrintN
else
    lcdPrintN lcdPrintNFull
then ;

0 variable thouBuff drop
0 variable millBuff drop

: addToBuff
thouBuff @ 1000 < if
    thouBuff @ 10 * + thouBuff !
else
    millBuff @ 1000 < if
        millBuff @ 10 * thouBuff @ 1000 / + millBuff !
        thouBuff @ 1000 mod 10 * + thouBuff !
    else
        drop
    then
then
;

: clrBuff
0 thouBuff !
0 millBuff !
;

: cBuff
millBuff @ 10000 um* thouBuff @ m+ ;



: lcdPrintBuff 
thouBuff @ millBuff @ lcdPrintD ;


